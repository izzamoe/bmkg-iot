// Autogenerated by github.com/snonky/pocketbase-gogen. Do not edit.
package db

import (
	"github.com/pocketbase/pocketbase/core"
	"github.com/pocketbase/pocketbase/tools/types"
)

type RoleSelectType int

const (
	Admin RoleSelectType = iota
	User
)

var zzRoleSelectTypeSelectNameMap = map[string]RoleSelectType{
	"admin": 0,
	"user":  1,
}
var zzRoleSelectTypeSelectIotaMap = map[RoleSelectType]string{
	0: "admin",
	1: "user",
}

type Users struct {
	core.BaseRecordProxy
}

func (p *Users) CollectionName() string {
	return "users"
}

func (p *Users) Name() string {
	return p.GetString("name")
}

func (p *Users) SetName(name string) {
	p.Set("name", name)
}

func (p *Users) Avatar() string {
	return p.GetString("avatar")
}

func (p *Users) SetAvatar(avatar string) {
	p.Set("avatar", avatar)
}

func (p *Users) Role() RoleSelectType {
	option := p.GetString("role")
	i, ok := zzRoleSelectTypeSelectNameMap[option]
	if !ok {
		panic("Unknown select value")
	}
	return i
}

func (p *Users) SetRole(role RoleSelectType) {
	i, ok := zzRoleSelectTypeSelectIotaMap[role]
	if !ok {
		panic("Unknown select value")
	}
	p.Set("role", i)
}

func (p *Users) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Users) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

func (p *Users) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Users) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

type Earthquake struct {
	core.BaseRecordProxy
}

func (p *Earthquake) CollectionName() string {
	return "earthquake"
}

func (p *Earthquake) Coordinates() string {
	return p.GetString("Coordinates")
}

func (p *Earthquake) SetCoordinates(coordinates string) {
	p.Set("Coordinates", coordinates)
}

func (p *Earthquake) Lintang() string {
	return p.GetString("Lintang")
}

func (p *Earthquake) SetLintang(lintang string) {
	p.Set("Lintang", lintang)
}

func (p *Earthquake) Bujur() string {
	return p.GetString("Bujur")
}

func (p *Earthquake) SetBujur(bujur string) {
	p.Set("Bujur", bujur)
}

func (p *Earthquake) Magnitude() string {
	return p.GetString("Magnitude")
}

func (p *Earthquake) SetMagnitude(magnitude string) {
	p.Set("Magnitude", magnitude)
}

func (p *Earthquake) Kedalaman() string {
	return p.GetString("Kedalaman")
}

func (p *Earthquake) SetKedalaman(kedalaman string) {
	p.Set("Kedalaman", kedalaman)
}

func (p *Earthquake) Wilayah() string {
	return p.GetString("Wilayah")
}

func (p *Earthquake) SetWilayah(wilayah string) {
	p.Set("Wilayah", wilayah)
}

func (p *Earthquake) Potensi() string {
	return p.GetString("Potensi")
}

func (p *Earthquake) SetPotensi(potensi string) {
	p.Set("Potensi", potensi)
}

func (p *Earthquake) Dirasakan() string {
	return p.GetString("Dirasakan")
}

func (p *Earthquake) SetDirasakan(dirasakan string) {
	p.Set("Dirasakan", dirasakan)
}

func (p *Earthquake) Shakemap() string {
	return p.GetString("Shakemap")
}

func (p *Earthquake) SetShakemap(shakemap string) {
	p.Set("Shakemap", shakemap)
}

func (p *Earthquake) Jam() string {
	return p.GetString("Jam")
}

func (p *Earthquake) SetJam(jam string) {
	p.Set("Jam", jam)
}

func (p *Earthquake) Tanggal() string {
	return p.GetString("Tanggal")
}

func (p *Earthquake) SetTanggal(tanggal string) {
	p.Set("Tanggal", tanggal)
}

func (p *Earthquake) DateTime() types.DateTime {
	return p.GetDateTime("DateTime")
}

func (p *Earthquake) SetDateTime(dateTime types.DateTime) {
	p.Set("DateTime", dateTime)
}

func (p *Earthquake) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *Earthquake) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

func (p *Earthquake) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *Earthquake) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

type IotDevice struct {
	core.BaseRecordProxy
}

func (p *IotDevice) CollectionName() string {
	return "iot_device"
}

func (p *IotDevice) Name() string {
	return p.GetString("name")
}

func (p *IotDevice) SetName(name string) {
	p.Set("name", name)
}

func (p *IotDevice) Lintang() string {
	return p.GetString("lintang")
}

func (p *IotDevice) SetLintang(lintang string) {
	p.Set("lintang", lintang)
}

func (p *IotDevice) Bujur() string {
	return p.GetString("bujur")
}

func (p *IotDevice) SetBujur(bujur string) {
	p.Set("bujur", bujur)
}

func (p *IotDevice) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *IotDevice) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

func (p *IotDevice) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *IotDevice) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

type HistoryIot struct {
	core.BaseRecordProxy
}

func (p *HistoryIot) CollectionName() string {
	return "history_iot"
}

func (p *HistoryIot) Device() *IotDevice {
	var proxy *IotDevice
	if rel := p.ExpandedOne("device"); rel != nil {
		proxy = &IotDevice{}
		proxy.Record = rel
	}
	return proxy
}

func (p *HistoryIot) SetDevice(device *IotDevice) {
	var id string
	if device != nil {
		id = device.Id
	}
	p.Record.Set("device", id)
	e := p.Expand()
	if device != nil {
		e["device"] = device.Record
	} else {
		delete(e, "device")
	}
	p.SetExpand(e)
}

func (p *HistoryIot) Active() bool {
	return p.GetBool("active")
}

func (p *HistoryIot) SetActive(active bool) {
	p.Set("active", active)
}

func (p *HistoryIot) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *HistoryIot) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

func (p *HistoryIot) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *HistoryIot) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

type UserHistory struct {
	core.BaseRecordProxy
}

func (p *UserHistory) CollectionName() string {
	return "user_history"
}

func (p *UserHistory) UserId() *Users {
	var proxy *Users
	if rel := p.ExpandedOne("user_id"); rel != nil {
		proxy = &Users{}
		proxy.Record = rel
	}
	return proxy
}

func (p *UserHistory) SetUserId(userId *Users) {
	var id string
	if userId != nil {
		id = userId.Id
	}
	p.Record.Set("user_id", id)
	e := p.Expand()
	if userId != nil {
		e["user_id"] = userId.Record
	} else {
		delete(e, "user_id")
	}
	p.SetExpand(e)
}

func (p *UserHistory) Lintang() string {
	return p.GetString("lintang")
}

func (p *UserHistory) SetLintang(lintang string) {
	p.Set("lintang", lintang)
}

func (p *UserHistory) Bujur() string {
	return p.GetString("bujur")
}

func (p *UserHistory) SetBujur(bujur string) {
	p.Set("bujur", bujur)
}

func (p *UserHistory) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *UserHistory) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

func (p *UserHistory) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *UserHistory) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

type TypeSelectType int

const (
	Wa TypeSelectType = iota
	Telegram
)

var zzTypeSelectTypeSelectNameMap = map[string]TypeSelectType{
	"wa":       0,
	"telegram": 1,
}
var zzTypeSelectTypeSelectIotaMap = map[TypeSelectType]string{
	0: "wa",
	1: "telegram",
}

type UserNotify struct {
	core.BaseRecordProxy
}

func (p *UserNotify) CollectionName() string {
	return "user_notify"
}

func (p *UserNotify) Identifier() string {
	return p.GetString("identifier")
}

func (p *UserNotify) SetIdentifier(identifier string) {
	p.Set("identifier", identifier)
}

func (p *UserNotify) Lintang() string {
	return p.GetString("lintang")
}

func (p *UserNotify) SetLintang(lintang string) {
	p.Set("lintang", lintang)
}

func (p *UserNotify) Bujur() string {
	return p.GetString("bujur")
}

func (p *UserNotify) SetBujur(bujur string) {
	p.Set("bujur", bujur)
}

func (p *UserNotify) Type() TypeSelectType {
	option := p.GetString("type")
	i, ok := zzTypeSelectTypeSelectNameMap[option]
	if !ok {
		panic("Unknown select value")
	}
	return i
}

func (p *UserNotify) SetType(type_ TypeSelectType) {
	i, ok := zzTypeSelectTypeSelectIotaMap[type_]
	if !ok {
		panic("Unknown select value")
	}
	p.Set("type", i)
}

func (p *UserNotify) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *UserNotify) SetCreated(created types.DateTime) {
	p.Set("created", created)
}

func (p *UserNotify) Updated() types.DateTime {
	return p.GetDateTime("updated")
}

func (p *UserNotify) SetUpdated(updated types.DateTime) {
	p.Set("updated", updated)
}

type ViewGempa struct {
	core.BaseRecordProxy
}

func (p *ViewGempa) CollectionName() string {
	return "view_gempa"
}

func (p *ViewGempa) Created() types.DateTime {
	return p.GetDateTime("created")
}

func (p *ViewGempa) SetCreated(created types.DateTime) {
	p.Set("created", created)
}
