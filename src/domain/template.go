// Autogenerated by github.com/snonky/pocketbase-gogen.
// Please feel free to edit after noting the explanation:
//
// This file is an intermediate product of the proxy generation.
// It is called a 'schema as code' or just 'template'. It is not meant to be
// compiled it is only meant for human interaction, place it in a separate package
// but never import it.
// Here's what you can do to influence the final code generation step:
//
// Do:
//   - Edit the struct names. The names are directly copied to the proxy struct definitions.
//   - Remove structs or fields that you don't want in the generated code. Note that upon removing a struct
//     you also have to remove any fields that have that struct as their type.
//   - Edit the type name in the '// select:' comments.
//   - Change the const names of the select options by adding a pair of [] to the // select: comment.
//     Example: // select: MySelectType(optionA, optionB)[OpA, OpB] <-- These constants will represent
//     the select options (like an enum). If you omit the [] the option names are used directly.
//   - Edit the field names. If you do, the generator still needs to know the original database field name.
//     To provide this, add a '// schema-name: [original field name]' comment directly above the field.
//   - Add methods to the template structs. The generator will replace any fields you access with the also
//     generated getters/setters. Be aware of that when repeatedly assigning a template field. You are
//     calling a setter on every assignment. The methods can also call each other.
//
// Do not:
//   - Add structs that do not represent a PB collection.
//   - Add fields that are not part of the PB schema to the structs.
//   - Change the '// collection-name:' comments unless the collection was actually renamed.
//     If the comment is missing from the first struct field, the generator will print a warning.
//   - Change the select values in the () of the '// select:' comments'
//   - Remove the '// system:' doc comments from the system fields. Generation will fail if you do so.
//   - Shadow any names from the core.Record struct. Generation will also fail for safety.
//   - Rename fields without preserving the original name with a '// schema-name:' comment.'
//
// If you edit this file, be careful and back it up to prevent the changes from being overridden by
// subsequent runs of the template command. Check out the PocketBase docs to find out how to use the
// generated code in your code: https://pocketbase.io/docs/go-record-proxy/
package domain

import "github.com/pocketbase/pocketbase/tools/types"

type Users struct {
	// collection-name: users
	// system: id
	Id string
	// system: password
	password string
	// system: tokenKey
	tokenKey string
	// system: email
	email string
	// system: emailVisibility
	emailVisibility bool
	// system: verified
	verified bool
	name     string
	avatar   string
	// select: RoleSelectType(admin, user)
	role    int
	created types.DateTime
	updated types.DateTime
}

type Earthquake struct {
	// collection-name: earthquake
	// system: id
	Id          string
	Coordinates string
	Lintang     string
	Bujur       string
	Magnitude   string
	Kedalaman   string
	Wilayah     string
	Potensi     string
	Dirasakan   string
	Shakemap    string
	Jam         string
	Tanggal     string
	DateTime    types.DateTime
	created     types.DateTime
	updated     types.DateTime
}

type IotDevice struct {
	// collection-name: iot_device
	// system: id
	Id      string
	name    string
	lintang string
	bujur   string
	created types.DateTime
	updated types.DateTime
}

type HistoryIot struct {
	// collection-name: history_iot
	// system: id
	Id      string
	device  *IotDevice
	active  bool
	created types.DateTime
	updated types.DateTime
}

type UserHistory struct {
	// collection-name: user_history
	// system: id
	Id      string
	user_id *Users
	lintang string
	bujur   string
	created types.DateTime
	updated types.DateTime
}

type UserNotify struct {
	// collection-name: user_notify
	// system: id
	Id         string
	identifier string
	lintang    string
	bujur      string
	// select: TypeSelectType(wa, telegram)
	type_   int
	created types.DateTime
	updated types.DateTime
}

type ViewGempa struct {
	// collection-name: view_gempa
	// system: id
	Id      string
	created types.DateTime
}
